/**
 * ComfyUI workflow validation utilities
 *
 * This module provides comprehensive validation functions for ComfyUI workflows,
 * A1111 parameters, and general metadata structures.
 *
 * @fileoverview Validation utilities for ComfyUI workflow data
 */
import { WorkflowInfo } from '../types';
/**
 * Validates ComfyUI workflow structure
 *
 * Checks if the provided data represents a valid ComfyUI workflow by examining
 * the structure for numeric node keys, class_type properties, and other patterns.
 *
 * @param data - Data to validate
 * @param strict - Whether to use strict validation mode
 * @returns True if the data represents a valid workflow
 *
 * @example
 * ```typescript
 * const workflow = { "1": { class_type: "LoadImage", inputs: {} } };
 * if (validateComfyUIWorkflow(workflow)) {
 *   console.log('Valid ComfyUI workflow detected');
 * }
 * ```
 */
export declare function validateComfyUIWorkflow(data: any, strict?: boolean): boolean;
/**
 * Extracts detailed information from a ComfyUI workflow
 *
 * Analyzes the workflow structure to extract node counts, types,
 * and presence of common components like prompts and models.
 *
 * @param workflow - Workflow data to analyze
 * @returns Object containing workflow statistics and information
 *
 * @example
 * ```typescript
 * const info = extractWorkflowInfo(workflow);
 * console.log(`Workflow has ${info.nodeCount} nodes of types: ${info.nodeTypes.join(', ')}`);
 * ```
 */
export declare function extractWorkflowInfo(workflow: any): WorkflowInfo;
/**
 * Strict workflow validation that throws errors
 *
 * Performs comprehensive validation and throws detailed ValidationError
 * if the data doesn't meet ComfyUI workflow requirements.
 *
 * @param data - Data to validate
 * @param context - Optional context for error reporting
 * @throws {ValidationError} When validation fails with detailed error information
 *
 * @example
 * ```typescript
 * try {
 *   validateWorkflowStrict(suspiciousData);
 *   console.log('Workflow is valid');
 * } catch (error) {
 *   console.error('Validation failed:', error.message);
 * }
 * ```
 */
export declare function validateWorkflowStrict(data: any, context?: string): void;
/**
 * Validates Automatic1111 (A1111) parameters
 *
 * Checks if the data contains valid A1111-style generation parameters
 * commonly found in images generated by Stable Diffusion WebUI.
 *
 * @param data - Data to validate
 * @returns True if the data contains valid A1111 parameters
 *
 * @example
 * ```typescript
 * const params = { positive_prompt: 'cat', steps: 20, cfg: 7.0 };
 * if (validateA1111Parameters(params)) {
 *   console.log('Valid A1111 parameters');
 * }
 * ```
 */
export declare function validateA1111Parameters(data: any): boolean;
/**
 * General metadata validation
 *
 * Validates that the provided data represents valid metadata that can be
 * processed by the extraction system.
 *
 * @param data - Data to validate
 * @returns True if the data represents valid metadata
 *
 * @example
 * ```typescript
 * if (validateMetadata(extractedData)) {
 *   console.log('Valid metadata found');
 * }
 * ```
 */
export declare function validateMetadata(data: any): boolean;
//# sourceMappingURL=validation.d.ts.map